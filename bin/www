#!/usr/bin/env node

/**
 * Module dependencies.
 */
require("regenerator-runtime/runtime");
if (process.env.NODE_ENV !== "production") {
    require("dotenv").config();
}
var app = require("../app");
var debug = require("debug")("casperholdersapi:server");
var http = require("http");
const { updateValidators } = require("../routes/validator");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Update
 */
setInterval(() => {
    updateValidators(true);
}, 3600000);
setInterval(() => {
    updateValidators();
}, 600000);

/**
 * Listen on provided port, on all network interfaces.
 */
const delay = async (ms) => new Promise(res => setTimeout(res, ms));
async function wrappedRetryUpdateValidators() {
    let count = 0;
    let maxTries = 12;
    while(true) {
        try {
            await updateValidators();
            break;
        } catch (e) {
            console.log("Failed to load validator data" + count+1);
            console.error(e);
            await delay(10000);
            if (++count === maxTries) throw e;
        }
    }
}

wrappedRetryUpdateValidators().then(() => {
    console.log("Validator data loaded");
}).catch((e) => {
    console.log("Failed to load validator data");
    console.error(e);
});
databaseInit().then(() => {
    console.log("Database migrations applied.");
}).catch((e) => {
    console.log("Database migration failed.");
    console.error(e);
});
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
console.log(`Server up on port :${port}`);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
    debug("Listening on " + bind);
}

async function databaseInit() {
    const { Umzug, SequelizeStorage } = require("umzug");
    const { sequelize } = require("../models");

    const deploysMigration = require("../migrations/20220312221304-create-deploys");
    const umzug = new Umzug({
        migrations: [deploysMigration],
        context: sequelize.getQueryInterface(),
        storage: new SequelizeStorage({ sequelize }),
        logger: console,
    });
    await umzug.up();
}

var dashboard = require("../bull");
var dashboardPort = normalizePort(process.env.DASHBOARD_PORT || "3001");
dashboard.set("port", dashboardPort);
var dashboardServer = http.createServer(dashboard);
dashboardServer.listen(dashboardPort);
dashboardServer.on("error", onErrorDashboard);
dashboardServer.on("listening", onListeningDashboard);
console.log(`Dashboard server up on port : ${dashboardPort}`);

function onErrorDashboard(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof dashboardPort === "string"
        ? "Pipe " + dashboardPort
        : "Port " + dashboardPort;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningDashboard() {
    var addr = dashboardServer.address();
    var bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
    debug("Listening on " + bind);
}
